tra_switch <- function(data, type = NULL, variable.name = "time", value.var = "value", melts_long = "x\\d+", set_numeric = TRUE, ids= NULL, type_extra = FALSE) {
  # Pr端fen, ob type angegeben wurde
  if (is.null(type)) {
    # Eine Fehlermeldung ausgeben und abbrechen
    stop("Error :/ You probably forgot to set arguments! Help: type = long or short; ids = id's to colindizes; variable.name = default is set to >time<; value.var = default is set to >value<; time_pattern = default is set to >x\\d+<; type_extra = TRUE/FALSE if no pattern is given, melt by colindex; to complicated? Ask me :) godbersengodber@gmail.com")
  }
  # Pr端fen, ob der Datensatz die Zeitpunkte als eigene Spalten hat
  if (type == "long") {
    if (any(grepl(melts_long, names(data)))) {
      # Die Zeitpunkte als eigene Spalten zusammenfassen
      data <- reshape2::melt(data, id.vars = names(data)[!grepl(melts_long, names(data))], variable.name = variable.name, value.name = value.var)
    }
		
    if(type_extra == TRUE) { 
      data <- reshape2::melt(data, id.vars = ids)
		
      # Die Spalte mit den Zeitpunkten in einen numerischen Wert umwandeln
      if (set_numeric == TRUE) {
        data[[variable.name]] <- as.numeric(sub(melts_long, "", data[[variable.name]]))
      }
    }
  } else if (type == "short") {
    # Eine Spalte mit Zeitpunkt und eine mit Wert haben
    data <- reshape2::dcast(data, id.vars ~ paste0(variable.name, "_", melts_long), value.var = value.var)
  } else {
    # Eine Fehlermeldung ausgeben, wenn type keinen g端ltigen Wert hat
    stop("Error :/ You probably forgot to set arguments! Help: type = long or short; ids = id's to colindizes; variable.name = default is set to >time<; value.var = default is set to >value<; time_pattern = default is set to >x\\d+<; type_extra = TRUE/FALSE if no pattern is given, melt by colindex; to complicated? Ask me :) godbersengodber@gmail.com")
  }
  # Den umgewandelten Datensatz zur端ckgeben
  return(data)
}

 # Define a function that takes a data frame and a vector of column names as arguments
# The function calculates the change rates between consecutive columns
# The function removes the rows with missing values by default, unless specified otherwise
# The function returns a modified data frame with the new columns added
tra_growthrates <- function(data, columns, na.omit = TRUE) {
  # Check if the arguments are valid
  if (!is.data.frame(data)) {
    stop("data must be a data frame")
  }
  if (!is.character(columns) || length(columns) < 2) {
    stop("columns must be a character vector of length at least 2")
  }
  if (!is.logical(na.omit)) {
    stop("na.omit must be a logical value")
  }
  # Create a copy of the data frame to avoid modifying the original one
  data_copy <- data
  # Remove the rows with missing values if na.omit is TRUE
  if (na.omit) {
    data_copy <- tidyr::na.omit(data_copy)
  }
  # Loop through the column names and calculate the change rates
  for (i in 1:(length(columns) - 1)) {
    # Create a new column name based on the current and next column names
    new_column <- paste0("change_rate_", columns[i], "_", columns[i + 1])
    # Calculate the change rate between the current and next columns
    data_copy[[new_column]] <- (data_copy[[columns[i + 1]]] - data_copy[[columns[i]]]) / data_copy[[columns[i]]]
  }
  # Return the modified data frame
  return(data_copy)
}
